// git init
// git add
// git commit -m ''

// git log
// git show
// git diff

// working directory
// staging area
// git repository

// git checkout .. <file>
// git reset

// git checkout -b branch(branching)
// git checkout branch
// git merge
// A<--B
// git checkout A
// git merge B
// git branch -D <name-branch (Delete branch)

// git reset --soft <to-commit> move status COMMIT to staging area but no change file, to-commit is SHA1 ID
// git reset --mixed <to-commit> move status COMMIT to working directory but not change, file to-commit is SHA1 ID
// git reset --hard <to-commit> move status COMMIT to working directory but change file, to-commit is SHA1 ID

// git revert <to-commit> move status file to status SHA1 ID
// .gitignore

// git config --global credential.helper store
// ^^^ not commend (~/.git-credentials)

// git config --global credential.helper "cache --timeout=18000"
// google "gnome-keyring" "git ssh"

// git clone
// git pull

// Pull Request
// 1. git checkout -b <feature-branch>
// 2. git push origin <branch>
// 3. create a pull request on github
// 4. review code
// 5. merge to branch

// Resolve conflits
When will conflits happen?
	1. Change the same file + same line
	2. A deleted file X, B modified file X

Method 1:
	1. Using 'git rebase'
	2. Resolve conflit
	3. Push again with -f

Method 2:
	1. Merge updated master to feature branch
	2. Resolve conflit
	3. Commit and push